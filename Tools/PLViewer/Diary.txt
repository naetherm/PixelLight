>> 23.03.2013
[NF]
PLViewerQt:
- Save scene feature.
- Possibility to create a new scene/close the current one.
- Made the materials reloading during the scene reloading.
- Added items "Reload only materials" and "Reload only scene".
- The scene reload when saving does not happen anymore but reload when the file is being externally changed remains.
- Also, the widgets "Scene Graph" and "Object" now appear automatically during the scene opening (need to uncomment).
- Bugfix: materials do not get resetted if after loading one scene you open another one.



>> 18.08.2012
[CO]
PLViewerQt:
- While working on some new Linux demo packages, Stephan Wezel noticed that "QFileSystemWatcher::addPath()", which is used inside
  "Gui::ResetAndFillQFileSystemWatcher()", was unable to find the files when feeding it with relative paths. After having a look into
  it the issue became clear to me:
  -> The current resource filename (e.g. "Data\Scripts\Lua\Main.lua") can be relative to the base directory received by
    "PLEngine::ScriptApplication::GetBaseDirectory()" (e.g. "C:\MyApplication\")
  -> Concatenating the two filenames results in the valid absolute path (e.g. "C:\MyApplication\Data\Scripts\Lua\Main.lua")
  -> We can't provide "QFileSystemWatcher::addPath()" just with the relative filename because this filename is considered to be relative
     to the base directory (e.g. "C:\MyApplication\"), not the current system directory (e.g. "C:\MyApplication\x86") you can query by
     using "PLCore::System::GetCurrentDir()". Qt can only know the current system directory and the result would be potentially
     wrong (e.g. "C:\MyApplication\x86\Data\Scripts\Lua\Main.lua").
  -> Solution: Feed "QFileSystemWatcher::addPath()" only with absolute filenames! (Stephans solution, but I wanted to understand what's
     going on in detail :)
  ... and yes, there are some directory syntax inconsistencies across multiple projects. One time a directory filename has a "\" at the end
  and another time it hasn't. Some time ago, it wasn't documented in detail how exactly the returned result is assumed to look like, and
  there was no written filename convention. After one decade of development, it became mixed up and since becoming aware of this issue, I
  started to heavily document the results. This is something we have to clean-up in PixelLight 2.0 by creating filename convention, but this
  is nothing I dare to do "on the fly" in PixelLight 1.0.



>> 20.06.2012
[CO]
- Bugfix: When loading a new resource, PLViewer/PLViewerQt did not destroy the currently used script



>> 29.02.2012
[CO]
- "Application::LoadResource()" now emits the "SignalSceneLoadingFinished"-signal in case the resource was not loaded via "LoadScene()",
  this way the behaviour is the same to a resource loaded via "LoadScene()"



>> 05.02.2012
[CO]
- "Application::LoadResource()": Use "SetBaseDirectory()" instead of "set current system application directory", should be sufficient



>> 04.02.2012
[CO]
PLViewerQt:
- Pause the timer as long as the "clone dialog" is shown, feels more correct this way



>> 03.02.2012
[CO]
PLViewerQt:
- When pressing the delete-key, delete the currently selected scene node
- Added support for cloning via transform gizmo. In case the shift key is down when starting the transform, clone mode is activated.
  When finishing the transform the user will be asked for the number of desired clones. A "AddedObject"-broadcast is made when adding
  the clones.



>> 02.02.2012
[CO]
PLViewerQt:
- "GuiPickingQObject::eventFilter()": Do only allow playing around with a transform gizmo when the left mouse button is used



>> 29.01.2012
[CO]
- PLViewer/PLViewerQt: Fixed configuration mixup
PLViewerQt:
- Camera menu: Added "Select Current Camera"
- "GuiPicking::SelectObject()": Usability: Show the "PLFrontendQt::DockWidgetSceneGraph" dock widget so we can view & edit the scene elements at once



>> 25.01.2012
[CO]
PLViewerQt:
- Usability: In case of an error open the log RTTI dock widget at once so we can see what when wrong



>> 24.01.2012
[CO]
- The color gradient background is now only activated within PLViewerQt, PLViewer should be as simple and generic as possible while PLViewerQt is primarly
  for developers and debugging
PLViewerQt:
- The window title is now set correctly
- Visual aid: Show backfaces as wireframe and silhouettes
- Added a configuration which makes it possible to deactivate visual aids
- There are now two entries within the tools menu for visual aids



>> 20.01.2012
[CO]
- Change from "13.01.2012": Better to directly set the frontend title, the application name itself is also used for the configuration name... and I don't
  want to have it changed...



>> 19.01.2012
[CO]
PLViewerQt:
- "GuiPicking::SetTransformMode(): When stopping a transform, unselect all axis. The scene node the transform gizmo scene node modifier is attached
  to may have been moved outside the visible area. To handle this case we now have to perform a new axis selection.



>> 19.01.2012
[SW]
PLViewerQt:
- Reviewed all QObject::eventFilter usage and in all cases we now doesn't filter out events which we handle to add additional handling
- the eventFilter for picking is now set for the render window and not for the QMainWindow



>> 17.01.2012
[CO]
- "Application::OnCreateScene()": The default implementation of this method creates a scene which we never need within this viewer, so, just overwrite
  it and do not create a scene in here



>> 14.01.2012
[CO]
PLViewerQt:
- Added "ApplicationQt::GetDockWidgetManager()" and exposed it to the RTTI. I'am now able to open a dock widget via a Lua script... which is quite useful
  when working on something without opening the required dock widgets everytime manually.



>> 14.01.2012
[SW]
PLViewerQt:
- Avoid that Qt prints the warning "QFileSystemWatcher::removePaths: list is empty" when QFileSystemWatcher::removePaths gets called with an empty list



>> 13.01.2012
[CO]
- Changed the names of the applications shown to the user to a less cryptic and more human readable "PixelLight viewer" and "PixelLight viewer (Qt)"
PLViewerQt:
- "SelectObject" is now emitted by the new "GuiPickingQObject" instead of "Gui"
- "GuiPickingQObject": When pressing the left mouse button while the mouse cursor is over a transform gizmo axis, the camera is now disabled and enabled
  again when the left mouse button is released. This way one is able to play around with the transform gizmo without controlling the camera at the same time.
- When one transform gizmo is currently in transform mode, the other transform gizmos are disabled and the axis selection is locked



>> 12.01.2012
[CO]
- "Application::OnControl()" was stealing all key hits, even when the viewer wasn't interested in the key
- The viewer application is now saving the filename of the currently loaded resource
PLViewerQt:
- Bugfix: "ApplicationQt::OnDeInit()" was calling the base method "OnInit()" instead of "OnDeInit()"
- When disabling the GUI, do also deactivate the timed update
- Added reload option
- Added automatic reload when the viewed resource file was changed
- It's possible (and reasonable) that e.g. a Lua script is composed of multiple scripts, it's now possible to track whether or
  not any of those associated files have been changed in order to reload the main-script



>> 08.01.2012
[CO]
- "Application::LoadResource()": When loading a resource in general, reset to the basic default scene renderer
PLViewerQt:
- When a scene node is selected, position and rotation transform gizmos are added automatically and removed later on if no longer required
- When loading a resource and it's not clear how to process it, open a dialog in order to give the user a choice between multiple options
- Usability: When something gets selected show the "PLFrontendQt::DockWidgetObject" dock widget so we can view & edit RTTI attributes at once
- Usability: When hiding all windows at once, do also unselect the current object (if one is selected)
  -> A kind of "Disable edit mode and switch back to business as usual"



>> 07.01.2012
[CO]
- PLViewer & PLViewerQt are now using the new "PLEngine::SceneCreatorLoadableType::GetLoadableTypes()" and "SceneCreatorLoadableType::ConfigureSceneByLoadableType()".
  This means that when e.g. a plugin introduced a totally new loadable type (as I'am doing it within my master thesis: "Volume"-type) it can automatically be used within
  the viewer without touching it's source code.
PLViewerQt:
- In case a scene node modifier is selected, the owner scene node of this object will be the currently selected object within the viewer and therefore
  will also be within debug mode
- Enable/disable the GUI for resource loading in general
- When loading a resource in general, give the user a hint what's currently going on
- Is now providing, when possible, "Application::LoadResource()" with a loadable type so that the method does not need to guess the loadable type itself



>> 06.01.2012
[CO]
PLViewerQt:
- "Gui::QtSlotSelectedWindow()": There's no longer need to tell new instanced RTTI dock widgets about current states they might be interested in. They
  are autonomously communicating with each other and asking their fellows for required information. This way we can add new features without e.g. touching
  PLViewerQt.



>> 05.01.2012
[CO]
- Usability improvement: It's possible that a mesh has no materials at all. In this case the mesh is not visible... this may lead to confusion when loading
  such a mesh within the viewer. In case the viewer detects that such a mesh is used, at least wireframes will now be shown so one can see what's going on.
PLViewerQt:
- Replaced the "SelectSceneNode" broadcast by the more generic "SelectObject"
- Added help menu bar entry



>> 03.01.2012
[CO]
PLViewerQt:
- Is using the new "PLFrontendQt::DockWidgetManager" to do the RTTI dock widget handling. In this viewer, only one instance of a RTTI dock widget is visible at
  the same time.
- Added first broadcast "SelectSceneNode": A RTTI method which is called when a scene node is selected
- Added "Window -> Hide all", is disabled if there's currently nothing to hide
- "Gui": This class is now also derived from "PLFrontendQt::DockWidget" to be able to spy on the dock widget communication
- "Gui::QtSlotSelectedWindow()": In case a new dock widget has come to life, it may probably want to know about the currently selected scene node



>> 02.01.2012
[CO]
- When loading a resource, the viewer now tries to activate the color gradient background within the scene renderer
  -> The standard scene renderer compositions of PixelLight within "Standard.zip" always have an inactive "PLCompositing::SRPBackgroundColorGradient"-instance
  -> By using a color gradient background, also completely black/gray/white etc. meshes can be seen which is a good thing as a default setting within this viewer
PLViewerQt:
- In the status bar, there's now a hint on which scene node the mouse is currently hovering on



>> 01.01.2012
[CO]
- Show the user a native filename within the GUI
- Beside "Scene" and "Script", "PLViewer" is now also able to load in "Mesh", "Material" and "Image" (= texture)
- "Application::LoadResource()": The resource loading is tricky, and every solution will end up in being a hack due to lack of information.
  Within materials, meshes etc. there are usually relative paths provided, no absolute (not just true for PixelLight file formats).
  Further, those paths are usually relative to a project root resulting e.g. within a default directory layout like
  - Root
    - Data
      - Meshes
      - Materials
  For "normal" projects this is no issue because everything is usually relative to the root project directory...
  ... but this viewer must be able to pick out e.g. a mesh out of nowhere and must still be able to locate the required
  other resources like materials. So, in here, we can only work with heuristics... this can and will of course go from
  time to time horribly wrong...
PLViewerQt:
- Redraw & ping the frontend so the GUI stays kind-of responsive while loading, but disable the Qt main window while loading so the user can't prank around within
  the GUI
- Show the user some loading progress
- Added GUI menu entry to make it possible to open the log file



>> 31.12.2011
[CO]
- Removed "PLViewerStandalone"-variation, while still maintaining the feature it introduced. This means that in the future I also no longer have to explain what
  "PLViewerStandalone" is for (see diary entry "21.08.2010"). "PLViewerStandalone" was just "PLViewer" compiled with a set "STANDALONE" preprocessor definition
  resulting that the log and configuration file are in the same directory as this executable instead of within the users directory were applications nowadays have
  to put those stuff into.
  -> In case the file "PLViewer.cfg" is in the same directory as the executable, or within one directory "above" (e.g. because there are "x86" and "x64" versions)
     run this application in "standalone-mode"
  -> When shipping something by using PLViewer, experience tells that there's always such a file provided to set the desired settings, so, this is no drawback
     and this enables us to provide just one version of this executable
PLViewerQt:
- Removed "PLViewerQtStandalone"-variation
- "PLViewerQt" is now reusing as much as possible from "PLViewer" and is "just" adding a lightweight GUI-layer



>> 30.12.2011
[CO]
PLViewerQt:
- Added a menu bar entry which makes it possible to select the currently used camera
- Added a menu bar entry which makes it possible to create new dockable widgets. This is currently still under construction, but shows that the RTTI dock
  widget concept is working quite well. See PLFrontendQt entry within the PLCore diary for details.



>> 29.12.2011
[CO]
- Started "PLViewerQt"-project with the goal to provide a more sophisticated generic PixelLight viewer application. PLViewer will not be removed because a
  minimalistic PixelLight viewer supporting scenes and scripts is still useful.
PLViewerQt:
- Started "PLViewerQt"-project with the goal to provide a more sophisticated generic PixelLight viewer application. PLViewer will not be removed because a
  minimalistic PixelLight viewer supporting scenes and scripts is still useful.
  Since the first public release of PixelLight there are the following points on the roadmap at http://www.pixellight.org/site/index.php/page/20.html
  - "Make PLViewer a more universal viewer also capable of viewing all kind of data (e.g. texture and meshes)"
  - "Create a nice UI for PLViewer (ingame GUI)"
  While those are quite important points, no one realized them... because this will be useful for my Master Thesis I'll now start the project instead of
  writing an own GUI for my Master Thesis. Over a year ago it was planned to create the GUI by using PLGui, which would have been cool... sadly since then
  no one had worked on PLGui. Although it has a really good design, PLGui is currently in no shape to be used in a more GUI intensive project without
  spending days in just implementing general GUI features. This approach was taken in some other projects, the results were good, but it was time consuming
  to archive the result. Right now I can't afford to spend days on just working on reimplementing GUI features e.g. Qt offers, and still having only poor and
  buggy result and issues across multiple platforms.
  So, the only reasonable option left appears to be using Qt for a more sophisticated generic PixelLight viewer application. Stephan Wezel already
  added "PLFrontendQt" which is a Qt<->PL adapter project. This project already offers several generic GUI elements like an RTTI inspector. I'am going to
  use "PLFrontendQt" for "PLViewerQt" and put everything reasonable in "PLFrontendQt" so that "PLViewerQt" can be as compact as possible, while still offering
  advanced features.
  On "10.08.2011" Stephan and I started "PLEditor" because there were questions from the community when such an editor will come. Goal was to make a start and
  motivate other people to jump onto the editor train. While people are interested in such a tool, it appears that no one is interested in helping to realize
  it. Stephan and I can't create a descend editor on our own while working on such a mammoth project as PixelLight itself. There are now some new PixelLight team
  members, but everybody has only a limited amount of time and they are still in the processes of getting experienced with the technology. When "PLViewerQt" is
  up and running, maybe it will show other persons how cool such an editor would be and that it's nothing overcomplicated from a programmers point of view... a
  lot of PixelLight implementation details are far more complex.
  Enough project opening speech. The goal is simple: Provide a generic PixelLight viewer with rudimentary edit features via GUI so it's for example possible to
  manipulate RTTI attributes of a scene node and be able to see the effect on the screen at once. Goal isn't to create a fully featured editor - that's what
  the editor project is for. I'am trying to keep the "core" of this viewer as close possible the viewer not using Qt to make it possible to see the Qt relevant part
  at once. Meaning I'am e.g. not using "main" etc. as usually done within Qt based applications.
- Started the GUI implementation
- Implemented "Gui::QtSlotLoad()" by using "PLFrontendQt::ConstructFileFilter" to automatically fill the file filters with the supported file formats
- Ensured that the new "PLViewerQt" is compiling and running under Linux as well



>> 30.11.2011
[CO]
- Instead of the base directory, the viewer now sets directly the current directory (the viewer is an executable application, not a library, so this should be ok)



>> 06.11.2011
[CO]
- "Application::LoadScene()": In case there's no "/Data/Scenes/" within the scene filename, the directory the scene is in is used as base directory instead



>> 21.08.2011
[CO]
- PLViewer is no longer closing at once when not provided with the filename of the scene/script to load in, or the loading failed
- PLViewer is now misusing the frontend title to communicate with the user *scrooge approach*



>> 15.08.2011
[CO]
- The PLViewer application is now directly within the tools executable directory. The purpose of PLViewer is to have a minimalistic and generic
  viewer application - but this application shouldn't e.g. require any own data in order to be able to run. For more than just viewing something,
  the planned PixelLight editor should do the job (one bigger decent tool instead of many small programs).



>> 31.07.2011
[CO]
- The PLViewer application is now using PLInput instead of PLGui to get and process input events



>> 13.06.2011
[CO]
- PLViewer can now also run scripted stand-alone applications instead of just showing scenes



>> 12.06.2011
[CO]
- Changed within "PLViewerConfig" the setting "DefaultScene" into the more generic "DefaultFilename"



/*********************************************************\
 *  The entries below are in German only
\*********************************************************/



>> 21.08.2010
[CO]
- "PLViewerStandalone" hinzugefügt welches sich von "PLViewer" nur darin unterscheidet das es "SetMultiUser(true)" aufruft



>> 20.08.2010
[CO]
- "PLViewerConfig" hinzugefügt mit "DefaultScene", dadurch lässt sich die Default-Szene von außen über die Konfiguration einstellen



>> 10.08.2010
[CO]
- "MultiUser" Komandozeilen Parameter in "Standalone" umbenannt



>> 09.08.2010
[CO]
- "MultiUser" Komandozeilen Parameter hinzugefügt, darüber lässt sich von außen Einstellen ob z.B. Log & Config direkt bei
  der exe liegen sollen, oder sauber im User-Verzeichnis. Für "Standalone"-Szenen die man packen und schnell mal so mit PLViewer
  weitergeben will ist das recht Praktisch. Diesen Parameter werte ich momentan in "Application::OnInitLog()" und nicht in
  "Application::OnInitCmdLine()" aus damit sich dieser Parameter auch auf das Log auswirkt.



>> 06.08.2010
[SB]
- Mit Escape kann das Programm nun beendet werden.



>> 17.07.2010
[CO]
- Bugfix: Basispfad "" sollte nicht entfernt werden -> Dies ist das aktuelle Verzeichnis, das normalerweise direkt das Verzeichnis
  ist in dem die exe liegt... so können z.B. noch PLViewer Daten geladen werden



>> 03.07.2010
[CO]
- PLViewer auf neues PLGui3 umgestellt, GUI Dinge erstmal rausgenommen



>> 23.05.2010
[CO]
- "PLSceneViewer" aus PLSamples nach PLTools verschoben und in "PLViewer" umbenannt. Zukünftig wird dieses kleine Tool nicht
  nur Szenen, sondern auch Texturen etc. Anzeigen können.
